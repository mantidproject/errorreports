services:
  postgres:
    image: postgres:13
    restart: always
    volumes:
      - ./pgdata:/var/lib/postgresql/data/
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
      DB_SERVICE: ${DB_SERVICE}
      DB_PORT: ${DB_PORT}
      SECRET_KEY: ${SECRET_KEY}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    expose:
      # Change the value in the nginx configuration if this is changed
      - "8080"
    depends_on:
      - postgres

  web:
    restart: always
    build: ./web
    volumes:
      - webdata:/usr/src/app
    expose:
      # Change the value in the nginx configuration if this is changed
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      DB_SERVICE: ${DB_SERVICE}
      DB_PORT: ${DB_PORT}
      SECRET_KEY: ${SECRET_KEY}
      # Define this in .env for development mode. DO NOT USE IN PRODUCTION
      DEBUG: ${DEBUG}

  nginx-errorreports:
    restart: always
    image: bitnami/nginx
    env_file: .env
    ports:
      - "${HOST_PORT}:80"
    volumes:
      - webdata:/usr/src/app
      - "./nginx/confs/errorreports.conf:/opt/bitnami/nginx/conf/server_blocks/errorreports.conf:ro"
    networks:
      - default
      - nginx_net

volumes:
  # This allows Nginx to serve static content, as Django won't...
  webdata:

networks:
  nginx_net:
    external: true
